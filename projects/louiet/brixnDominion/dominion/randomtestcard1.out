--- Testing Card: Smithy ---
TOTAL TEST:
drawCard failed: 0
discardCard failed: 0
CardEffect failed: 0
Hand fails: 0

Function 'main'
Lines executed:100.00% of 22
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
Calls executed:100.00% of 16

Function 'smithyCheck'
Lines executed:79.31% of 29
Branches executed:100.00% of 12
Taken at least once:50.00% of 12
Calls executed:100.00% of 5

File 'randomtestcard1.c'
Lines executed:88.24% of 51
Branches executed:100.00% of 16
Taken at least once:62.50% of 16
Calls executed:100.00% of 21
Creating 'randomtestcard1.c.gcov'

        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:#include <time.h>
        -:    9:#include <math.h>
        -:   10:
        -:   11:#define TESTCARD "Smithy"
        -:   12:#define TESTNUM 1000
        -:   13:
        -:   14:
function smithyCheck called 1000 returned 100% blocks executed 75%
     1000:   15:void smithyCheck(int thisPlayer, struct gameState *post, int* fails, int failsize){
        -:   16:
        -:   17:	struct gameState pre;
     1000:   18:	memcpy(&pre, post, sizeof(struct gameState));
        -:   19:
        -:   20:
     1000:   21:	int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
     1000:   22:	int retval = cardEffect(smithy, choice1, choice2, choice3, post, handpos, &bonus); // run card function
call    0 returned 100%
        -:   23:
     1000:   24:	int preHC = pre.handCount[thisPlayer];
        -:   25:	//int preDeC = pre.deckCount[thisPlayer];
        -:   26:
        -:   27:	//int newCards = 3;
        -:   28:	//int discarded = 1;
        -:   29:
     1000:   30:	int val1 = drawCard(thisPlayer, &pre);
call    0 returned 100%
     1000:   31:	if (val1 < 0) // test for successful draw
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   32:		fails[0]++;
        -:   33:	else
     1000:   34:		fails[4]++;
     1000:   35:	int val2 = drawCard(thisPlayer, &pre);
call    0 returned 100%
     1000:   36:	if (val2 < 0) // test for successful draw
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   37:		fails[0]++;
        -:   38:	else 
     1000:   39:		fails[4]++;
     1000:   40:	int val3 = drawCard(thisPlayer, &pre);
call    0 returned 100%
     1000:   41:	if (val3 < 0) // test for successful draw
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   42:		fails[0]++;
        -:   43:	else
     1000:   44:		fails[4]++;
        -:   45:
     1000:   46:	int disval = discardCard(0, thisPlayer, &pre, 0);
call    0 returned 100%
     1000:   47:	if(disval)// test for successful discard
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   48:		fails[1]++;
        -:   49:	else
     1000:   50:		fails[4]++;
        -:   51:
     1000:   52:	if (retval)// test for successful Effect
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   53:		fails[2]++;
        -:   54:	else
     1000:   55:		fails[4]++;
        -:   56:
     1000:   57:	int postHC = post->handCount[thisPlayer];
        -:   58:	//int postDeC = post->deckCount[thisPlayer];
     1000:   59:	if (!(preHC <= postHC - 1)) //hand count check
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   60:		fails[3]++;
        -:   61:	else
     1000:   62:		fails[4]++;
     1000:   63:}
        -:   64:
        -:   65:
function main called 1 returned 100% blocks executed 100%
        1:   66:int main(){
        1:   67:	printf("--- Testing Card: %s ---\n", TESTCARD);
call    0 returned 100%
        -:   68:
        1:   69:	srand((unsigned int)(time(NULL)));
call    0 returned 100%
call    1 returned 100%
        -:   70:	struct gameState G; 
        -:   71:
        1:   72:	int thisPlayer = 0;
        1:   73:	int fails[5] = {0,0,0,0,0};
        -:   74:	
        -:   75:	int i,j;
     1001:   76:	for(i=0; i<TESTNUM; i++){ //for random test loop
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   77:	
 26301000:   78:		for (j = 0; j < sizeof(struct gameState); j++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
 26300000:   79:			((char*)&G)[j] = floor(Random() * 256);
call    0 returned 100%
        -:   80:		
     1000:   81:		thisPlayer = floor(Random() * MAX_PLAYERS);
call    0 returned 100%
     1000:   82:		G.deckCount[thisPlayer] = floor(Random() * MAX_DECK);
call    0 returned 100%
     1000:   83:		G.discardCount[thisPlayer] = floor(Random() * MAX_DECK);
call    0 returned 100%
     1000:   84:		G.handCount[thisPlayer] = floor(Random() * MAX_HAND);
call    0 returned 100%
     1000:   85:		G.playedCardCount = floor(Random() * (MAX_DECK - 1));
call    0 returned 100%
     1000:   86:		G.whoseTurn = thisPlayer;
        -:   87:
     1000:   88:		smithyCheck(thisPlayer, &G, fails, 5); // call check function
call    0 returned 100%
        -:   89:	}
        -:   90:
        1:   91:	printf("TOTAL TEST:\n");
call    0 returned 100%
        1:   92:	printf("drawCard failed: %d\n", fails[0]);
call    0 returned 100%
        1:   93:	printf("discardCard failed: %d\n", fails[1]);
call    0 returned 100%
        1:   94:	printf("CardEffect failed: %d\n", fails[2]);
call    0 returned 100%
        1:   95:	printf("Hand fails: %d\n", fails[3]);
call    0 returned 100%
        1:   96:	printf("\n");
call    0 returned 100%
        1:   97:	return 0;
        -:   98:}
