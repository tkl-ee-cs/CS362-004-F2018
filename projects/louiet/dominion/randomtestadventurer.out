--- Testing Card: Adventurer ---
TOTAL TEST FAILED: 3000
cardEffect failed: 0
Hand fails: 1000
PlayedCard failed: 1000
Deck fails: 0
Handling fails: 1000

Function 'main'
Lines executed:100.00% of 34
Branches executed:100.00% of 18
Taken at least once:100.00% of 18
Calls executed:100.00% of 19

Function 'adventCheck'
Lines executed:83.33% of 30
Branches executed:100.00% of 12
Taken at least once:58.33% of 12
Calls executed:100.00% of 1

File 'randomtestadventurer.c'
Lines executed:92.19% of 64
Branches executed:100.00% of 30
Taken at least once:83.33% of 30
Calls executed:100.00% of 20
Creating 'randomtestadventurer.c.gcov'

        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:#include <time.h>
        -:    9:#include <math.h>
        -:   10:
        -:   11:#define TESTCARD "Adventurer"
        -:   12:#define TESTNUM 1000
        -:   13:#define ALLCARDS treasure_map
        -:   14:
function adventCheck called 1000 returned 100% blocks executed 74%
     1000:   15:void adventCheck(int thisPlayer, struct gameState *post, int* fails, int failsize, int numTreasures){
        -:   16:
        -:   17:	struct gameState pre;
        -:   18://	int tempHand[MAX_HAND][2];
     1000:   19:	memcpy(&pre, post, sizeof(struct gameState));
        -:   20:
        -:   21://	int postTreC = int preTreC = 0;
        -:   22://	int numDrawn = int TreDrawn = 0;
        -:   23:
     1000:   24:	int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
     1000:   25:	int retval = cardEffect(adventurer, choice1, choice2, choice3, post, handpos, &bonus); // run card function
call    0 returned 100%
        -:   26:
     1000:   27:	int postHC = post->handCount[thisPlayer];
     1000:   28:	int preHC = pre.handCount[thisPlayer];
     1000:   29:	int postDeC = post->deckCount[thisPlayer];
     1000:   30:	int preDeC = pre.deckCount[thisPlayer];
     1000:   31:	int postPlayed = post->playedCardCount;
     1000:   32:	int prePlayed = pre.playedCardCount;
     1000:   33:	int postDiC = post->discardCount[thisPlayer];
     1000:   34:	int preDiC = pre.discardCount[thisPlayer];
        -:   35:
        -:   36:
     1000:   37:	if(retval == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     1000:   38:		fails[0]++;
        -:   39:	else
    #####:   40:		fails[1]++;
        -:   41:
     1000:   42:	if(preHC + 2 - 1 == postHC) // two treasurers added, adventurer discarded
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   43:		fails[0]++;
        -:   44:	else
     1000:   45:		fails[2]++;
        -:   46:
     1000:   47:	if(prePlayed + 1 == postPlayed) //treasure is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   48:		fails[0]++;
        -:   49:	else
     1000:   50:		fails[3]++;
        -:   51:
     1000:   52:	if(preDeC - 2 >= postDeC) // check drew two treasure
branch  0 taken 97% (fallthrough)
branch  1 taken 3%
      968:   53:		fails[0]++;
       32:   54:	else if(preDiC -1 >= postDeC) // check drew at least one from shuffled discard
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       32:   55:		fails[0]++;
        -:   56:	else
    #####:   57:		fails[4]++;
        -:   58:
     1000:   59:	if(preDeC - 2 + preDiC + 1 == postDeC + postDiC) //two treasures taken from deck+discard, adventurer discarded
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   60:		fails[0]++;
        -:   61:	else
     1000:   62:		fails[5]++;
     1000:   63:}
        -:   64:
function main called 1 returned 100% blocks executed 100%
        1:   65:int main(){
        1:   66:	printf("--- Testing Card: %s ---\n", TESTCARD);
call    0 returned 100%
        -:   67:
        1:   68:	srand((unsigned int)(time(NULL)));
call    0 returned 100%
call    1 returned 100%
        -:   69:	struct gameState G;
        -:   70:
        1:   71:	int thisPlayer = 0;
        1:   72:	int fails[6] = {0,0,0,0,0,0};
        -:   73:
        -:   74:
        -:   75:	int i,j,l;
        -:   76:	int numTreasures;
     1001:   77:	for(i=0; i<TESTNUM; i++){ //for random test loop
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   78:
 26301000:   79:		for (j = 0; j < sizeof(struct gameState); j++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
 26300000:   80:			((char*)&G)[j] = floor(Random() * 256);
call    0 returned 100%
        -:   81:
     1000:   82:		thisPlayer = floor(Random() * MAX_PLAYERS);
call    0 returned 100%
     1000:   83:		G.deckCount[thisPlayer] = floor(Random() * MAX_DECK);
call    0 returned 100%
     1000:   84:		G.discardCount[thisPlayer] = floor(Random() * MAX_DECK);
call    0 returned 100%
     1000:   85:		G.handCount[thisPlayer] = floor(Random() * MAX_HAND);
call    0 returned 100%
     1000:   86:		G.playedCardCount = floor(Random() * (MAX_DECK - 1));
call    0 returned 100%
     1000:   87:		G.whoseTurn = thisPlayer;
        -:   88:
     1000:   89:		numTreasures = 0;
     3000:   90:		while(numTreasures<2){
branch  0 taken 50%
branch  1 taken 50% (fallthrough)
   251978:   91:			for (l = 0; l < G.deckCount[thisPlayer]; l++){ //create and shuffle deck
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   250978:   92:				G.deck[thisPlayer][l] = floor(Random() * ALLCARDS);
call    0 returned 100%
   250978:   93:				if(G.deck[thisPlayer][l] >= copper && G.deck[thisPlayer][l] <= gold) 
branch  0 taken 85% (fallthrough)
branch  1 taken 15%
branch  2 taken 14% (fallthrough)
branch  3 taken 86%
    28915:   94:					numTreasures++; //count number of treasure in case
        -:   95:			}
   247461:   96:			for (l = 0; l < G.discardCount[thisPlayer]; l++){ //create and shuffle deck
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
   246461:   97:				G.discard[thisPlayer][l] = floor(Random() * ALLCARDS);
call    0 returned 100%
   246461:   98:				if(G.discard[thisPlayer][l] >= copper && G.discard[thisPlayer][l] <= gold) 
branch  0 taken 85% (fallthrough)
branch  1 taken 15%
branch  2 taken 14% (fallthrough)
branch  3 taken 86%
    28333:   99:					numTreasures++; //count number of treasure in case
        -:  100:			}
        -:  101:		}
        -:  102:
     1000:  103:		adventCheck(thisPlayer, &G, fails, 6, numTreasures); // call check function
call    0 returned 100%
        -:  104:	}
        -:  105:
        1:  106:	int allfails = fails[1] + fails[2] + fails[3] + fails[4] + fails[5]; 
        -:  107:
        1:  108:	printf("TOTAL TEST FAILED: %d\n", allfails);
call    0 returned 100%
        1:  109:	printf("cardEffect failed: %d\n", fails[1]);
call    0 returned 100%
        1:  110:	printf("Hand fails: %d\n", fails[2]);
call    0 returned 100%
        1:  111:	printf("PlayedCard failed: %d\n", fails[3]);
call    0 returned 100%
        1:  112:	printf("Deck fails: %d\n", fails[4]);
call    0 returned 100%
        1:  113:	printf("Handling fails: %d\n", fails[5]);
call    0 returned 100%
        1:  114:	printf("\n");
call    0 returned 100%
        1:  115:	return 0;
        -:  116:}
        -:  117:
