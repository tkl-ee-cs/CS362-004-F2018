--- Testing Card: Great Hall ---
TOTAL TEST FAILED: 2
Hand failed: 0
cardEffect failed: 0
discardCard failed: 0
Deck fails: 2
numAction fails: 0

Function 'main'
Lines executed:100.00% of 26
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
Calls executed:100.00% of 17

Function 'ghallCheck'
Lines executed:85.71% of 28
Branches executed:100.00% of 10
Taken at least once:60.00% of 10
Calls executed:100.00% of 1

File 'randomtestcard2.c'
Lines executed:92.59% of 54
Branches executed:100.00% of 14
Taken at least once:71.43% of 14
Calls executed:100.00% of 18
Creating 'randomtestcard2.c.gcov'

        -:    0:Source:randomtestcard2.c
        -:    0:Graph:randomtestcard2.gcno
        -:    0:Data:randomtestcard2.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:#include <time.h>
        -:    9:#include <math.h>
        -:   10:
        -:   11:#define TESTCARD "Great Hall"
        -:   12:#define TESTNUM 1000
        -:   13:
        -:   14:
function ghallCheck called 1000 returned 100% blocks executed 76%
     1000:   15:void ghallCheck(int thisPlayer, struct gameState *post, int* fails, int failsize){
        -:   16:
        -:   17:	struct gameState pre;
     1000:   18:	memcpy(&pre, post, sizeof(struct gameState));
        -:   19:
     1000:   20:	int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
     1000:   21:	int retval = cardEffect(great_hall, choice1, choice2, choice3, post, handpos, &bonus); // run card function
call    0 returned 100%
        -:   22:
     1000:   23:	int postHC = post->handCount[thisPlayer];
     1000:   24:	int preHC = pre.handCount[thisPlayer];
     1000:   25:	int postDeC = post->deckCount[thisPlayer];
     1000:   26:	int preDeC = pre.deckCount[thisPlayer];
     1000:   27:	int postDiC = post->playedCardCount;
     1000:   28:	int preDiC = pre.playedCardCount;
     1000:   29:	int preNuAc = pre.numActions;
     1000:   30:	int postNuAc = post->numActions;
        -:   31:
     1000:   32:	if(retval == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     1000:   33:		fails[0]++;
        -:   34:	else
    #####:   35:		fails[2]++;
        -:   36:
     1000:   37:	if (preHC == postHC)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     1000:   38:		fails[0]++;
        -:   39:	else
    #####:   40:		fails[1]++;
        -:   41:
     1000:   42:        if (preDeC - 1 == postDeC)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
      998:   43:                fails[0]++;
        -:   44:        else
        2:   45:                fails[4]++;
        -:   46:
     1000:   47:        if ( preDiC + 1 == postDiC)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     1000:   48:                fails[0]++;
        -:   49:        else
    #####:   50:                fails[3]++;
        -:   51:
     1000:   52:	if (preNuAc + 1  == postNuAc)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     1000:   53:		fails[0]++;
        -:   54:	else
    #####:   55:		fails[5]++;
        -:   56:
     1000:   57:}
        -:   58:
function main called 1 returned 100% blocks executed 100%
        1:   59:int main(){
        1:   60:	printf("--- Testing Card: %s ---\n", TESTCARD);
call    0 returned 100%
        -:   61:
        1:   62:	srand((unsigned int)(time(NULL)));
call    0 returned 100%
call    1 returned 100%
        -:   63:	struct gameState G;
        -:   64:
        1:   65:	int thisPlayer = 0;
        1:   66:	int numActions = 0;
        -:   67:
        1:   68:	int fails[6] = {0,0,0,0,0,0};
        -:   69:
        -:   70:
        -:   71:	int i,j;
     1001:   72:	for(i=0; i<TESTNUM; i++){ //for random test loop
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   73:
 26301000:   74:		for (j = 0; j < sizeof(struct gameState); j++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
 26300000:   75:			((char*)&G)[j] = floor(Random() * 256);
call    0 returned 100%
        -:   76:
     1000:   77:		thisPlayer = floor(Random() * MAX_PLAYERS);
call    0 returned 100%
     1000:   78:		G.deckCount[thisPlayer] = floor(Random() * MAX_DECK);
call    0 returned 100%
     1000:   79:		G.discardCount[thisPlayer] = floor(Random() * MAX_DECK);
call    0 returned 100%
     1000:   80:		G.handCount[thisPlayer] = floor(Random() * MAX_HAND);
call    0 returned 100%
     1000:   81:		G.playedCardCount = floor(Random() * (MAX_DECK - 1));
call    0 returned 100%
     1000:   82:		G. numActions = numActions;
     1000:   83:		G.whoseTurn = thisPlayer;
        -:   84:
     1000:   85:		ghallCheck(thisPlayer, &G, fails, 5); // call check function
call    0 returned 100%
        -:   86:	}
        1:   87:	int allfails = fails[1] + fails[2] + fails[3] + fails[4];
        -:   88:
        1:   89:	printf("TOTAL TEST FAILED: %d\n", allfails);
call    0 returned 100%
        1:   90:	printf("Hand failed: %d\n", fails[1]);
call    0 returned 100%
        1:   91:	printf("cardEffect failed: %d\n", fails[2]);
call    0 returned 100%
        1:   92:	printf("discardCard failed: %d\n", fails[3]);
call    0 returned 100%
        1:   93:	printf("Deck fails: %d\n", fails[4]);
call    0 returned 100%
        1:   94:	printf("numAction fails: %d\n", fails[5]);
call    0 returned 100%
        1:   95:	printf("\n");
call    0 returned 100%
        1:   96:	return 0;
        -:   97:}
        -:   98:
