--- Testing Card: Smithy ---
TOTAL TEST FAILED: 1000
drawCard failed: 0
discardCard failed: 0
CardEffect failed: 0
Hand fails: 1000

Function 'main'
Lines executed:100.00% of 23
Branches executed:100.00% of 4
Taken at least once:100.00% of 4
Calls executed:100.00% of 16

Function 'smithyCheck'
Lines executed:74.19% of 31
Branches executed:75.00% of 16
Taken at least once:37.50% of 16
Calls executed:100.00% of 5

File 'randomtestcard1.c'
Lines executed:85.19% of 54
Branches executed:80.00% of 20
Taken at least once:50.00% of 20
Calls executed:100.00% of 21
Creating 'randomtestcard1.c.gcov'

        -:    0:Source:randomtestcard1.c
        -:    0:Graph:randomtestcard1.gcno
        -:    0:Data:randomtestcard1.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:#include <string.h>
        -:    8:#include <time.h>
        -:    9:#include <math.h>
        -:   10:
        -:   11:#define TESTCARD "Smithy"
        -:   12:#define TESTNUM 1000
        -:   13:
        -:   14:
function smithyCheck called 1000 returned 100% blocks executed 67%
     1000:   15:void smithyCheck(int thisPlayer, struct gameState *post, int* fails, int failsize){
        -:   16:
        -:   17:	struct gameState pre;
     1000:   18:	memcpy(&pre, post, sizeof(struct gameState));
        -:   19:
        -:   20:
     1000:   21:	int handpos = 0, choice1 = 0, choice2 = 0, choice3 = 0, bonus = 0;
     1000:   22:	int retval = cardEffect(smithy, choice1, choice2, choice3, post, handpos, &bonus); // run card function
call    0 returned 100%
        -:   23:
     1000:   24:	int preHC = pre.handCount[thisPlayer];
        -:   25:	//int preDeC = pre.deckCount[thisPlayer];
        -:   26:
        -:   27:	//int newCards = 3;
        -:   28:	//int discarded = 1;
        -:   29:
     1000:   30:	int val1 = drawCard(thisPlayer, &pre);
call    0 returned 100%
     1000:   31:	if (val1 == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     1000:   32:	        fails[4]++;
    #####:   33:	else if((val1 == -1) && (pre.deckCount[thisPlayer] == 0))
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:   34:		fails[4]++;
        -:   35:	else
    #####:   36:		fails[0]++;
        -:   37:
        -:   38:
     1000:   39:	int val2 = drawCard(thisPlayer, &pre);
call    0 returned 100%
     1000:   40:	if (val2 < 0) // test for successful draw
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   41:		fails[0]++;
        -:   42:	else 
     1000:   43:		fails[4]++;
     1000:   44:	int val3 = drawCard(thisPlayer, &pre);
call    0 returned 100%
     1000:   45:	if (val3 < 0) // test for successful draw
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   46:		fails[0]++;
        -:   47:	else
     1000:   48:		fails[4]++;
        -:   49:
     1000:   50:	int disval = discardCard(0, thisPlayer, &pre, 0);
call    0 returned 100%
     1000:   51:	if(disval)// test for successful discard
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   52:		fails[1]++;
        -:   53:	else
     1000:   54:		fails[4]++;
        -:   55:
     1000:   56:	if (retval)// test for successful Effect
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   57:		fails[2]++;
        -:   58:	else
     1000:   59:		fails[4]++;
        -:   60:
     1000:   61:	int postHC = post->handCount[thisPlayer];
        -:   62:	//int postDeC = post->deckCount[thisPlayer];
     1000:   63:	if (!(preHC <= postHC - 1)) //hand count check
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
     1000:   64:		fails[3]++;
        -:   65:	else
    #####:   66:		fails[4]++;
     1000:   67:}
        -:   68:
        -:   69:
function main called 1 returned 100% blocks executed 100%
        1:   70:int main(){
        1:   71:	printf("--- Testing Card: %s ---\n", TESTCARD);
call    0 returned 100%
        -:   72:
        1:   73:	srand((unsigned int)(time(NULL)));
call    0 returned 100%
call    1 returned 100%
        -:   74:	struct gameState G; 
        -:   75:
        1:   76:	int thisPlayer = 0;
        1:   77:	int fails[5] = {0,0,0,0,0};
        -:   78:	
        -:   79:	int i,j;
     1001:   80:	for(i=0; i<TESTNUM; i++){ //for random test loop
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
        -:   81:	
 26301000:   82:		for (j = 0; j < sizeof(struct gameState); j++)
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
 26300000:   83:			((char*)&G)[j] = floor(Random() * 256);
call    0 returned 100%
        -:   84:		
     1000:   85:		thisPlayer = floor(Random() * MAX_PLAYERS);
call    0 returned 100%
     1000:   86:		G.deckCount[thisPlayer] = floor(Random() * MAX_DECK);
call    0 returned 100%
     1000:   87:		G.discardCount[thisPlayer] = floor(Random() * MAX_DECK);
call    0 returned 100%
     1000:   88:		G.handCount[thisPlayer] = floor(Random() * MAX_HAND);
call    0 returned 100%
     1000:   89:		G.playedCardCount = floor(Random() * (MAX_DECK - 1));
call    0 returned 100%
     1000:   90:		G.whoseTurn = thisPlayer;
        -:   91:
     1000:   92:		smithyCheck(thisPlayer, &G, fails, 5); // call check function
call    0 returned 100%
        -:   93:	}
        -:   94:
        1:   95:	int allfails = fails[0] + fails[1] + fails[2] + fails[3]; // gather results
        -:   96:
        1:   97:	printf("TOTAL TEST FAILED: %d\n", allfails);
call    0 returned 100%
        1:   98:	printf("drawCard failed: %d\n", fails[0]);
call    0 returned 100%
        1:   99:	printf("discardCard failed: %d\n", fails[1]);
call    0 returned 100%
        1:  100:	printf("CardEffect failed: %d\n", fails[2]);
call    0 returned 100%
        1:  101:	printf("Hand fails: %d\n", fails[3]);
call    0 returned 100%
        1:  102:	printf("\n");
call    0 returned 100%
        1:  103:	return 0;
        -:  104:}
